# Bitcoin Budget - Streamlit Web Application Rules

## Project Overview
A **modern, web-based Bitcoin budgeting application** using Python + Streamlit + Plotly + Session State. Account-based envelope budgeting with advanced analytics.

**Core Principle: If you can do it in Excel with a few macros, it should be simple in code - now with a modern web interface and account-based budgeting.**

## Technology Stack
- **Language**: Python 3.8+
- **Web Framework**: Streamlit (modern web UI)
- **Charts**: Plotly (interactive visualizations)
- **Data**: Pandas + Session State (privacy-focused, no database)
- **Storage**: Session-based isolation (each user has private data)
- **Deployment**: Streamlit Cloud with auto-deploy from GitHub
- **Target**: ~2400 lines total across 2 files (main app + reports)

## Development Rules

### File Structure (Clean Web Architecture)
```
bitcoin_budget/
‚îú‚îÄ‚îÄ streamlit_app.py           # Main application (~2400 lines)
‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py           # Package initialization
‚îÇ   ‚îî‚îÄ‚îÄ reports.py            # All reports functionality (~1000 lines)
‚îú‚îÄ‚îÄ requirements.txt          # Streamlit + dependencies
‚îú‚îÄ‚îÄ README.md                 # Complete documentation
‚îî‚îÄ‚îÄ .cursorrules             # Development guidelines
```

### Code Organization (Streamlit Structure)
```python
# streamlit_app.py structure:
import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import calendar
import plotly.express as px
import plotly.graph_objects as go

# === STREAMLIT PAGE CONFIG ===
st.set_page_config(page_title="Bitcoin Budget", layout="wide")

# === SESSION STATE FUNCTIONS ===
def initialize_session_state():
    """Initialize user data in session state"""

def add_account(name, initial_balance, is_tracked=True):
    """Add Bitcoin account (tracked/untracked)"""

def add_income(amount_sats, description, date, account_id):
    """Add income transaction with account tracking"""

def add_expense(amount_sats, description, category_id, date, account_id):
    """Add expense transaction with account tracking"""

# === ACCOUNT-BASED BUDGET LOGIC ===
def get_tracked_account_balance():
    """Get total balance of tracked accounts"""

def get_available_to_assign():
    """Calculate: Tracked Balance - Money in Categories"""

def get_category_balance(category_id):
    """Get category balance (all-time allocated - spent)"""

# === STREAMLIT UI FUNCTIONS ===
def initialize_session_state():
    """Initialize Streamlit session state"""

def main_page():
    """Main budget application page"""

def sidebar_navigation():
    """Sidebar for navigation and month selection"""

# === MAIN ===
if __name__ == "__main__":
    main()
```

### Python Style Guidelines
- **Functions**: Use `snake_case` for all functions and variables
- **Classes**: Use `PascalCase` for class names
- **Constants**: Use `UPPER_CASE` for constants
- **Docstrings**: Simple one-line docstrings for functions
- **Comments**: Only when the code isn't self-explanatory
- **Line length**: Keep under 100 characters

### Session State Guidelines
- **Privacy-First**: Each user gets isolated data in st.session_state.user_data
- **Account-Based**: Tracked (on-budget) and untracked (off-budget) accounts
- **Four data structures**: accounts, transactions, categories, allocations
- **Integer amounts**: Store satoshis as integers (no decimals)
- **Text dates**: Store as 'YYYY-MM-DD' strings
- **Account tracking**: All transactions linked to specific accounts

### Streamlit UI Guidelines
- **Built-in components**: Use st.form, st.columns, st.tabs, st.sidebar
- **Interactive widgets**: Date inputs, selectboxes, sliders with validation
- **Data display**: st.dataframe, st.metric, st.plotly_chart with hierarchical sorting
- **Visual hierarchy**: Tree-style indicators (üìÇ, ‚îú‚îÄ, ‚îî‚îÄ) for category parent-child relationships
- **Status indicators**: Color-coded status (üü¢ Good, ‚ö™ Empty/Zero, üî¥ Overspent)
- **Enhanced form patterns**: Real-time validation with immediate user feedback
- **Account management**: Full-width edit forms outside column constraints for better UX
- **Action buttons**: Clean, individual action buttons rather than dropdown menus
- **Context-aware UI**: Quick action buttons that adapt to budget situation
- **Layout**: Wide layout with responsive columns
- **Navigation**: Sidebar with session state management
- **Error handling**: Use st.error, st.warning, st.success for user feedback

### Mobile-Responsive Guidelines ‚úÖ **NEW**
- **Mobile detection**: Use `is_mobile_layout()` function checking `st.session_state.mobile_mode`
- **Responsive columns**: `get_responsive_columns(desktop_cols)` for dynamic column adjustment
- **Mobile metrics**: `mobile_friendly_metrics()` for stacked metric display on mobile
- **Mobile headers**: `mobile_responsive_header(text, level)` for smaller fonts on mobile
- **Form key conflicts**: Use unique prefixes for mobile forms (`mobile_add_category_form`)
- **Touch-friendly buttons**: Full-width buttons with better spacing on mobile
- **Mobile charts**: Stack vertically, horizontal legends below charts vs vertical on side
- **Mobile tables**: Tighter columns, shorter labels, hide non-essential columns on mobile
- **Single codebase**: Same functionality with conditional mobile-optimized presentation
- **User control**: Sidebar toggle allows switching between desktop and mobile layouts

### Bitcoin-Specific Rules
- **Satoshis everywhere**: Always work in satoshis (integers)
- **Sats-only standard**: Formally reject BIP 178, only accept satoshi input
- **Display formatting**: Show as "1,000,000 sats" with comma formatting
- **No decimals**: Avoid floating point for Bitcoin amounts
- **Input validation**: Ensure positive integers for amounts with real-time feedback

### Simplicity Rules
‚ùå **NO** complex state management beyond st.session_state
‚ùå **NO** custom CSS or complex styling
‚ùå **NO** external APIs or integrations
‚ùå **NO** authentication systems
‚ùå **NO** databases or persistent storage
‚ùå **NO** async/await unless truly needed
‚ùå **NO** complex JavaScript or custom components

‚úÖ **YES** to simple Streamlit functions
‚úÖ **YES** to session state for data storage
‚úÖ **YES** to built-in Streamlit components
‚úÖ **YES** to Plotly for charts (built-in integration)
‚úÖ **YES** to session state for navigation
‚úÖ **YES** to pandas DataFrames for data display
‚úÖ **YES** to responsive layouts with st.columns
‚úÖ **YES** to account-based budgeting patterns

### Development Workflow
1. **Start with session state**: Initialize user data structure
2. **Add account functions**: Tracked/untracked account management
3. **Add core functions**: Income, expenses, categories with account tracking
4. **Build Streamlit pages**: Main app with accounts tab and sidebar navigation
5. **Add reports module**: Separate file for 5 types of analytics
6. **Test in browser**: Run `streamlit run streamlit_app.py` locally
7. **Deploy to web**: Auto-deploy to Streamlit Cloud via GitHub

### Error Handling
- **User errors**: Show st.error with helpful message
- **Session state errors**: Catch and initialize missing data
- **Input validation**: Check before session state operations
- **Form validation**: Use Streamlit form submission patterns
- **Graceful degradation**: App shouldn't crash on bad input
- **Account validation**: Ensure account exists before transactions

### Testing Strategy
- **Manual testing**: Click through the web interface
- **Function testing**: Run individual functions in REPL
- **Session state testing**: Check data structure integrity
- **Browser testing**: Test responsiveness and mobile compatibility
- **Multi-user testing**: Verify session isolation works properly
- **No unit tests**: Keep it simple for this scope

### Performance Guidelines
- **Personal budget app**: Performance is not critical
- **Session state is fast**: In-memory operations are instant
- **Streamlit handles caching**: Use @st.cache_data when needed
- **Keep operations simple**: Basic list/dict operations
- **Pandas for display**: DataFrame operations are efficient enough
- **Account balance caching**: Store computed balances to avoid recalculation

### Bitcoin Display Formats
```python
def format_sats(satoshis):
    """Format satoshis for display"""
    return f"{satoshis:,} sats"

def format_btc(satoshis):
    """Format as BTC"""
    btc = satoshis / 100_000_000
    return f"{btc:.8f} BTC"

def parse_amount_input(text):
    """Parse user input to satoshis"""
    # Handle "1000", "1,000", "0.001 BTC", etc.
```

### Streamlit-Specific Patterns
```python
# Session state initialization with user data
def initialize_session_state():
    if 'user_data' not in st.session_state:
        st.session_state.user_data = {
            'accounts': [demo_accounts],
            'transactions': [demo_transactions],
            'categories': [demo_categories],
            'allocations': [demo_allocations]
        }
    # Initialize mobile mode
    if 'mobile_mode' not in st.session_state:
        st.session_state.mobile_mode = False

# Mobile-responsive layout helpers
def is_mobile_layout():
    """Check if mobile layout is enabled"""
    return st.session_state.get('mobile_mode', False)

def get_responsive_columns(desktop_cols):
    """Get responsive column count for desktop vs mobile"""
    if is_mobile_layout():
        return min(2, desktop_cols)  # Max 2 columns on mobile
    return desktop_cols

def mobile_friendly_metrics(metrics_data):
    """Display metrics in mobile-friendly layout"""
    if is_mobile_layout():
        # Stack in pairs for mobile
        for i in range(0, len(metrics_data), 2):
            cols = st.columns(2)
            for j, col in enumerate(cols):
                if i + j < len(metrics_data):
                    with col:
                        metric = metrics_data[i + j]
                        st.metric(metric['label'], metric['value'])
    else:
        # Single row for desktop
        cols = st.columns(len(metrics_data))
        for i, (col, metric) in enumerate(zip(cols, metrics_data)):
            with col:
                st.metric(metric['label'], metric['value'])

def mobile_responsive_header(text, level=3):
    """Show smaller headers on mobile"""
    if is_mobile_layout():
        level = min(6, level + 1)  # One level smaller on mobile
    st.markdown('#' * level + ' ' + text)

# Account-based form handling with mobile responsiveness
form_key = "mobile_add_income_form" if is_mobile_layout() else "add_income_form"
with st.form(form_key):
    if is_mobile_layout():
        # Stack vertically on mobile
        amount = st.text_input("Amount", placeholder="1,000,000")
        description = st.text_input("Description")
        account = st.selectbox("Account", [acc['name'] for acc in get_accounts()])
    else:
        # Side-by-side on desktop
        col1, col2, col3 = st.columns(3)
        with col1:
            amount = st.text_input("Amount", placeholder="1,000,000")
        with col2:
            description = st.text_input("Description")
        with col3:
            account = st.selectbox("Account", [acc['name'] for acc in get_accounts()])
    
    submitted = st.form_submit_button("Add Income")
    
    if submitted and amount and description and account:
        try:
            amount_sats = parse_amount_input(amount)
            account_id = get_account_id_by_name(account)
            if add_income(amount_sats, description, date.today(), account_id):
                st.success("Income added successfully!")
                st.rerun()
        except ValueError:
            st.error("Invalid amount format")

# Mobile-responsive chart layouts
if is_mobile_layout():
    # Stack charts vertically on mobile
    st.plotly_chart(fig1, use_container_width=True)
    st.plotly_chart(fig2, use_container_width=True)
else:
    # Side-by-side on desktop
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)

# Context-aware quick actions with mobile responsiveness
if available_to_assign > 0:
    cols = get_responsive_columns(2)
    col_layout = st.columns(cols)
    with col_layout[0]:
        if st.button("üöÄ To Bitcoin Stack", use_container_width=is_mobile_layout()):
            allocate_to_bitcoin_category(available_to_assign)
    if cols > 1:
        with col_layout[1]:
            if st.button("‚öñÔ∏è Distribute Evenly", use_container_width=is_mobile_layout()):
                distribute_evenly_across_categories(available_to_assign)

# Mobile toggle in sidebar
with st.sidebar:
    mobile_mode = st.toggle("üì± Mobile-Friendly Layout", value=st.session_state.mobile_mode)
    if mobile_mode != st.session_state.mobile_mode:
        st.session_state.mobile_mode = mobile_mode
        st.rerun()
```

### Anti-Patterns to Avoid
‚ùå **Over-engineering**: Don't build complex multi-page apps
‚ùå **Custom components**: Stick to built-in Streamlit widgets
‚ùå **Complex state**: Keep state in database and session_state only
‚ùå **External dependencies**: Minimize additional packages
‚ùå **Custom styling**: Use default Streamlit appearance
‚ùå **Multiple files**: Limit to main app + reports module

### Success Criteria
- ‚úÖ **Works in browser**: Accessible via web interface
- ‚úÖ **Mobile friendly**: Responsive design works on phones/tablets with user toggle
- ‚úÖ **Interactive charts**: Plotly visualizations with hover details
- ‚úÖ **Professional UI**: Tree-style hierarchy with visual indicators
- ‚úÖ **Smart automation**: Context-aware quick action buttons
- ‚úÖ **Visual feedback**: Progress bars and color-coded status indicators
- ‚úÖ **Fast development**: Build and test quickly with hot reload
- ‚úÖ **Easy deployment**: Auto-deploy to Streamlit Cloud from GitHub
- ‚úÖ **Account-based budgeting**: Tracked and untracked accounts with transfers
- ‚úÖ **All YNAB features**: Income, expenses, categories, allocation with accounts
- ‚úÖ **Advanced analytics**: 3 consolidated report types with Bitcoin Power Law projections
- ‚úÖ **Privacy-first**: Session-based isolation for each user
- ‚úÖ **Motivational**: Net Worth Future Value to encourage stacking
- ‚úÖ **No crashes**: Handle user errors gracefully
- ‚úÖ **Mobile optimization**: Single codebase with responsive layouts and user control
- ‚úÖ **Touch-friendly**: Mobile layouts optimized for touch interaction and screen space

### Example Streamlit Function with Mobile Responsiveness
```python
def main_page():
    """Main budget application page with account-based budgeting and mobile responsiveness"""
    current_month = st.session_state.current_month
    
    st.title(f"‚Çø Bitcoin Budget - {current_month}")
    
    # Account-based budget summary metrics with mobile-friendly display
    tracked_balance = get_total_account_balance(tracked_only=True)
    in_categories = get_total_category_balances_current()
    available = tracked_balance - in_categories
    
    # Mobile-responsive metrics display
    metrics_data = [
        {'label': 'Tracked Account Balance', 'value': format_sats(tracked_balance)},
        {'label': 'Money in Categories', 'value': format_sats(in_categories)},
        {'label': 'Available to Assign', 'value': format_sats(available)}
    ]
    mobile_friendly_metrics(metrics_data)
    
    # Mobile-responsive header
    mobile_responsive_header("Budget Health", level=3)
    
    # Tabbed interface with accounts
    tab1, tab2, tab3 = st.tabs(["üè¶ Accounts", "üìÅ Categories", "üí≥ Transactions"])
    
    with tab1:
        # Account management with mobile-responsive forms
        if is_mobile_layout():
            # Full-width mobile forms
            accounts_page_mobile()
        else:
            # Multi-column desktop layout
            accounts_page()
```

Remember: **Simple is better than complex. Account-based is better than transaction-only. Privacy-first is better than shared data. Motivational is better than purely functional.**

## Data Management

### üìÅ **JSON Export/Import** ‚úÖ **IMPLEMENTED**
The app includes simple file-based data management that maintains Bitcoin's self-custody principles:

**Current Features**:
- ‚úÖ **Export Budget**: Download complete budget data as timestamped JSON file
- ‚úÖ **Import Budget**: Upload previously exported JSON file to restore data
- ‚úÖ **Reset to Demo**: Clear all data and start fresh with sample data
- ‚úÖ **Data Validation**: Import validation with error handling
- ‚úÖ **Privacy-First**: All operations happen locally in browser

**File Operations Guidelines**:
- **Streamlit file widgets**: Use st.file_uploader and st.download_button
- **User feedback**: Clear success/error messages for import/export  
- **Data validation**: Validate imports before applying to prevent corruption
- **Privacy maintained**: No server-side storage, user controls all data

**Technical Implementation**:
```python
def export_budget_data():
    """Export complete budget data as JSON"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"bitcoin_budget_{timestamp}.json"
    return json.dumps(st.session_state.user_data, indent=2)

def import_budget_data(json_data):
    """Import and validate budget data from JSON"""
    # Validate data structure and restore to session state
```

### üéØ **Development Philosophy**
- **Keep It Simple**: Focus on core budgeting functionality with modern UI
- **User Ownership**: Users control their own data files
- **Privacy by Design**: No server storage, no tracking, no accounts
- **Self-Custody**: Following Bitcoin ethos of personal responsibility
- **Cross-Device**: Export/import enables device portability without complexity
- **Professional Experience**: Visual hierarchy and smart automation for better UX 