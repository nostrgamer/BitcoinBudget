# Bitcoin Budget - Streamlit Web Application Rules

## Project Overview
A **modern, web-based Bitcoin budgeting application** using Python + Streamlit + Plotly + SQLite. Maximum simplicity with professional web UI.

**Core Principle: If you can do it in Excel with a few macros, it should be simple in code - now with a modern web interface.**

## Technology Stack
- **Language**: Python 3.8+
- **Web Framework**: Streamlit (modern web UI)
- **Charts**: Plotly (interactive visualizations)
- **Data**: Pandas (data handling)
- **Database**: SQLite (single file)
- **Deployment**: Streamlit Cloud, Heroku, or self-hosted
- **Target**: ~1600 lines total across 2-3 files

## Development Rules

### File Structure (Clean Web Architecture)
```
bitcoin_budget/
‚îú‚îÄ‚îÄ streamlit_app.py           # Main application (~750 lines)
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py           # Package initialization
‚îÇ   ‚îî‚îÄ‚îÄ reports.py            # All reports functionality (~870 lines)
‚îú‚îÄ‚îÄ budget.db                 # SQLite database (auto-created)
‚îú‚îÄ‚îÄ requirements_streamlit.txt # Streamlit + dependencies
‚îî‚îÄ‚îÄ README.md                 # Usage instructions
```

### Code Organization (Streamlit Structure)
```python
# streamlit_app.py structure:
import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import calendar
import plotly.express as px
import plotly.graph_objects as go

# === STREAMLIT PAGE CONFIG ===
st.set_page_config(page_title="Bitcoin Budget", layout="wide")

# === DATABASE FUNCTIONS ===
def init_database():
    """Create tables if they don't exist"""

def add_income(amount_sats, description, date):
    """Add income transaction"""

def add_expense(amount_sats, description, category_id, date):
    """Add expense transaction"""

# === BUDGET LOGIC ===
def get_total_income(month=None):
    """Get total income for month or all time"""

def get_available_to_assign(month):
    """Calculate unallocated income"""

def get_category_balance(category_id, month):
    """Get envelope balance with rollover"""

# === STREAMLIT UI FUNCTIONS ===
def initialize_session_state():
    """Initialize Streamlit session state"""

def main_page():
    """Main budget application page"""

def sidebar_navigation():
    """Sidebar for navigation and month selection"""

# === MAIN ===
if __name__ == "__main__":
    main()
```

### Python Style Guidelines
- **Functions**: Use `snake_case` for all functions and variables
- **Classes**: Use `PascalCase` for class names
- **Constants**: Use `UPPER_CASE` for constants
- **Docstrings**: Simple one-line docstrings for functions
- **Comments**: Only when the code isn't self-explanatory
- **Line length**: Keep under 100 characters

### Database Guidelines
- **Simple SQLite**: No ORM, just direct SQL
- **Three tables**: transactions, categories, allocations
- **Integer amounts**: Store satoshis as integers (no decimals)
- **Text dates**: Store as 'YYYY-MM-DD' strings
- **Foreign keys**: Use them for data integrity

### Streamlit UI Guidelines
- **Built-in components**: Use st.form, st.columns, st.tabs, st.sidebar
- **Interactive widgets**: Date inputs, selectboxes, sliders with validation
- **Data display**: st.dataframe, st.metric, st.plotly_chart
- **Layout**: Wide layout with responsive columns
- **Navigation**: Sidebar with session state management
- **Error handling**: Use st.error, st.warning, st.success for user feedback

### Bitcoin-Specific Rules
- **Satoshis everywhere**: Always work in satoshis (integers)
- **Display formatting**: Show as "1,000,000 sats" or "0.01000000 BTC"
- **No decimals**: Avoid floating point for Bitcoin amounts
- **Input validation**: Ensure positive integers for amounts

### Simplicity Rules
‚ùå **NO** complex state management beyond st.session_state
‚ùå **NO** custom CSS or complex styling
‚ùå **NO** external APIs or integrations
‚ùå **NO** authentication systems
‚ùå **NO** multiple database connections
‚ùå **NO** async/await unless truly needed
‚ùå **NO** complex JavaScript or custom components

‚úÖ **YES** to simple Streamlit functions
‚úÖ **YES** to direct database calls
‚úÖ **YES** to built-in Streamlit components
‚úÖ **YES** to Plotly for charts (built-in integration)
‚úÖ **YES** to session state for navigation
‚úÖ **YES** to pandas DataFrames for data display
‚úÖ **YES** to responsive layouts with st.columns

### Development Workflow
1. **Start with database**: Get SQLite working first
2. **Add core functions**: Income, expenses, categories
3. **Build Streamlit pages**: Main app with sidebar navigation
4. **Add reports module**: Separate file for analytics
5. **Test in browser**: Run `streamlit run streamlit_app.py`
6. **Deploy to web**: Streamlit Cloud or production hosting

### Error Handling
- **User errors**: Show st.error with helpful message
- **Database errors**: Catch and show user-friendly message
- **Input validation**: Check before database operations
- **Form validation**: Use Streamlit form submission patterns
- **Graceful degradation**: App shouldn't crash on bad input

### Testing Strategy
- **Manual testing**: Click through the web interface
- **Function testing**: Run individual functions in REPL
- **Database testing**: Check SQLite file with DB Browser
- **Browser testing**: Test responsiveness and mobile compatibility
- **No unit tests**: Keep it simple for this scope

### Performance Guidelines
- **Personal budget app**: Performance is not critical
- **SQLite is fast enough**: No need for optimization
- **Streamlit handles caching**: Use @st.cache_data when needed
- **Keep queries simple**: Basic SELECT/INSERT/UPDATE
- **Pandas for display**: DataFrame operations are efficient enough

### Bitcoin Display Formats
```python
def format_sats(satoshis):
    """Format satoshis for display"""
    return f"{satoshis:,} sats"

def format_btc(satoshis):
    """Format as BTC"""
    btc = satoshis / 100_000_000
    return f"{btc:.8f} BTC"

def parse_amount_input(text):
    """Parse user input to satoshis"""
    # Handle "1000", "1,000", "0.001 BTC", etc.
```

### Streamlit-Specific Patterns
```python
# Session state management
if 'current_month' not in st.session_state:
    st.session_state.current_month = get_current_month()

# Form handling with validation
with st.form("add_income_form"):
    amount = st.text_input("Amount", placeholder="1000000 or 0.01 BTC")
    description = st.text_input("Description")
    submitted = st.form_submit_button("Add Income")
    
    if submitted and amount and description:
        try:
            amount_sats = parse_amount_input(amount)
            if add_income(amount_sats, description, date.today()):
                st.success("Income added successfully!")
                st.rerun()
        except ValueError:
            st.error("Invalid amount format")

# Interactive charts
fig = px.pie(breakdown_data, values='amount', names='category',
             title='Spending Breakdown')
st.plotly_chart(fig, use_container_width=True)

# Navigation with sidebar
with st.sidebar:
    if st.button("üìä Reports"):
        st.session_state.page = 'reports'
        st.rerun()
```

### Anti-Patterns to Avoid
‚ùå **Over-engineering**: Don't build complex multi-page apps
‚ùå **Custom components**: Stick to built-in Streamlit widgets
‚ùå **Complex state**: Keep state in database and session_state only
‚ùå **External dependencies**: Minimize additional packages
‚ùå **Custom styling**: Use default Streamlit appearance
‚ùå **Multiple files**: Limit to main app + reports module

### Success Criteria
- ‚úÖ **Works in browser**: Accessible via web interface
- ‚úÖ **Mobile friendly**: Responsive design works on phones/tablets
- ‚úÖ **Interactive charts**: Plotly visualizations with hover details
- ‚úÖ **Fast development**: Build and test quickly with hot reload
- ‚úÖ **Easy deployment**: One-click deploy to Streamlit Cloud
- ‚úÖ **All YNAB features**: Income, expenses, categories, allocation
- ‚úÖ **Advanced analytics**: Visual reports with opportunity cost analysis
- ‚úÖ **No crashes**: Handle user errors gracefully

### Example Streamlit Function
```python
def main_page():
    """Main budget application page"""
    current_month = st.session_state.current_month
    
    st.title(f"‚Çø Bitcoin Budget - {current_month}")
    
    # Budget summary metrics
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total Income", format_sats(get_total_income(current_month)))
    
    # Tabbed interface
    tab1, tab2, tab3, tab4 = st.tabs(["üí∞ Income", "üìÅ Categories", "üí∏ Expenses", "üìã Transactions"])
    
    with tab1:
        with st.form("add_income"):
            # Income form with validation
            pass
```

Remember: **Simple is better than complex. Web-native is better than desktop porting. Interactive is better than static.** 