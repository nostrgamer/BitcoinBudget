// <auto-generated />
using System;
using BitcoinOnBudgetDesktop.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BitcoinOnBudgetDesktop.Infrastructure.Migrations
{
    [DbContext(typeof(BudgetDbContext))]
    [Migration("20250603060000_AddRolloverFields")]
    partial class AddRolloverFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.BudgetPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("BudgetPeriods");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId", "Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.CategoryAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetPeriodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<long>("NewAllocation")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RolloverAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BudgetPeriodId", "CategoryId")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryAllocations");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.BudgetPeriod", b =>
                {
                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.Budget", "Budget")
                        .WithMany("BudgetPeriods")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Category", b =>
                {
                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.Budget", "Budget")
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.CategoryAllocation", b =>
                {
                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.BudgetPeriod", "BudgetPeriod")
                        .WithMany("CategoryAllocations")
                        .HasForeignKey("BudgetPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.Category", "Category")
                        .WithMany("Allocations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetPeriod");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Transaction", b =>
                {
                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.Budget", "Budget")
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitcoinOnBudgetDesktop.Core.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Budget", b =>
                {
                    b.Navigation("BudgetPeriods");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.BudgetPeriod", b =>
                {
                    b.Navigation("CategoryAllocations");
                });

            modelBuilder.Entity("BitcoinOnBudgetDesktop.Core.Entities.Category", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
} 